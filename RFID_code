#include <LiquidCrystal_I2C.h> // controlar o LCD do Arduino
#include <SPI.h> // controlar dispositivos "Serial Peripheral Interface" 
#include <MFRC522.h> // ler/escrever uma senha para um cartão RFID
#include <Wire.h> // permite a comunicação entre dispositivos I2C/TWI 

LiquidCrystal_I2C lcd(0x27, 16, 2); // o tamanho do LCD

unsigned long startMillis = millis(); // os milisegundos quando o programa iniciou
unsigned long currentMillis; // quantos milisegundos se passaram depois do programa ter iniciado
const unsigned long period = 604800000; // período usado para definir quando reiniciar o programa
unsigned long toneDuration = 500;

#define SS_PIN 10
#define RST_PIN 9 
#define RELAY 3 // definir o pino do relay
#define BUZZER 2 // definir o pino do buzzer

MFRC522 mfrc522(SS_PIN, RST_PIN); // Cria instância do MFRC522.

void setup() {
  Serial.begin(9600); // Inicia uma comunicação serial
  SPI.begin();
  mfrc522.PCD_Init();
  pinMode(RELAY, OUTPUT); // definir o pino de relay como output
  pinMode(BUZZER, OUTPUT); // um "buzzer" para fazer um som
  noTone(BUZZER);
  lcd.init(); // ligar o LCD
  lcd.clear(); // limpar o LCD
  lcd.backlight(); // ligar a luz do LCD
  tone(BUZZER, 1000); // indicar ao buzzer para fazer um som
  noTone(BUZZER);
  lcd.print("ARDUINO SECURITY"); // escrever no LCD
  lcd.setCursor(0, 1); // meter o cursor na segunda linha, na coluna 0
  lcd.print("      DOOR  ");
  lcd.clear();
  lcd.print("   ACTIVATING    ");
  lcd.setCursor(0, 1);
  lcd.print("     SYSTEM    ");
  lcd.clear();
  digitalWrite(RELAY, HIGH); // mudar o estado do Relay de low para high
  digitalWrite(RELAY, LOW);
  lcd.print("   PLEASE   BE ");
  lcd.setCursor(0, 1);
  lcd.print("    PATIENT  ");
  digitalWrite(RELAY, LOW);
  tone(BUZZER, 1000);
  noTone(BUZZER);
  lcd.clear();
  lcd.print("   SCAN CARD ");
  lcd.setCursor(0, 1);
  lcd.print("   TO UNLOCK  ");
}

void(*resetFunc) (void) = 0; // reiniciar o programa

void loop() {
  currentMillis = millis(); // tempo desde que o programa iniciou
  if (currentMillis - startMillis >= period) { // testar se o período passou
    resetFunc(); // chamar reset
  }
  if (!mfrc522.PICC_IsNewCardPresent()) return; // procurar por novas cartas
  if (!mfrc522.PICC_ReadCardSerial()) return; // selecionar uma das cartas
  Serial.print("UID tag :");
  String content = "";
  byte letter;
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
    Serial.print(mfrc522.uid.uidByte[i], HEX);
    content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
    content.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  Serial.println();
  lcd.clear();
  lcd.print(" ACCESS  GRANTED ");
  lcd.setCursor(0, 1);
  lcd.print("  WELCOME BACK  ");
  tone(BUZZER, 1000);
  uint32_t toneStartMillis = millis();
  while (millis() - toneStartMillis < toneDuration) {
    // Espera por toneDuration
  }
  noTone(BUZZER);
  uint32_t delayStartMillis = millis();
  while (millis() - delayStartMillis < 200) {
    // Espera por 200 milissegundos
  }
  digitalWrite(RELAY, HIGH);
  uint32_t relayStartMillis = millis();
  while (millis() - relayStartMillis < 500) {
    // Espera por 500 milissegundos
  }
  digitalWrite(RELAY, LOW);
  lcd.clear();
  lcd.print("   SCAN CARD ");
  lcd.setCursor(0, 1);
  lcd.print("   TO UNLOCK  ");
  }
