// incluir as bibliotecas necessárias
#include <LiquidCrystal_I2C.h> // controlar o LCD do Arduino
#include <SPI.h> // controlar dispositivos "Serial Peripheral Interface"
#include <MFRC522.h> // ler/escrever uma senha para um cartão RFID
#include <Wire.h> // permite a comunicação entre dispositivos I2C/TWI

// criar uma instância do LCD com o endereço 0x27, com 16 colunas e 2 linhas
LiquidCrystal_I2C lcd(0x27, 16, 2);

// iniciar as variáveis de tempo de execução do programa
unsigned long startMillis = millis(); // os milisegundos quando o programa iniciou
unsigned long currentMillis; // quantos milisegundos se passaram depois do programa ter iniciado
const unsigned long period = 604800000; // período usado para definir quando reiniciar o programa
unsigned long toneDuration = 500; // duração do som emitido pelo buzzer

// definir os pinos usados pelo MFRC522
#define SS_PIN 10
#define RST_PIN 9

// definir os pinos do relay e do buzzer
#define RELAY 3
#define BUZZER 2

// criar uma instância do MFRC522
MFRC522 mfrc522(SS_PIN, RST_PIN);

void setup() {
// iniciar a comunicação serial
Serial.begin(9600);
// iniciar o SPI
SPI.begin();
// iniciar o MFRC522
mfrc522.PCD_Init();

// definir os pinos do relay e do buzzer como saída
pinMode(RELAY, OUTPUT);
pinMode(BUZZER, OUTPUT);

// desativar o som emitido pelo buzzer
noTone(BUZZER);

// inicializar o LCD e ligar a luz
lcd.init();
lcd.clear();
lcd.backlight();

// emitir um som pelo buzzer
tone(BUZZER, 1000);
noTone(BUZZER);

// escrever no LCD
lcd.print("ARDUINO SECURITY");
lcd.setCursor(0, 1);
lcd.print(" DOOR ");

// limpar o LCD e escrever novo texto
lcd.clear();
lcd.print(" ACTIVATING ");
lcd.setCursor(0, 1);
lcd.print(" SYSTEM ");

// mudar o estado do Relay de low para high e de volta para low
digitalWrite(RELAY, HIGH);
digitalWrite(RELAY, LOW);

// escrever no LCD
lcd.print(" PLEASE BE ");
lcd.setCursor(0, 1);
lcd.print(" PATIENT ");

// mudar o estado do Relay para low e emitir um som pelo buzzer
digitalWrite(RELAY, LOW);
tone(BUZZER, 1000);
noTone(BUZZER);

// limpar o LCD e escrever novo texto
lcd.clear();
lcd.print(" SCAN CARD ");
lcd.setCursor(0, 1);
lcd.print(" TO UNLOCK ");

}

// criar um ponteiro para a função de reset
void(*resetFunc) (void) = 0;

void loop() {
// atualizar o tempo de execução do programa
currentMillis = millis();

// testar se o período de tempo estabelecido passou
if (currentMillis - startMillis >= period) {
// chamar a função de reset
resetFunc();
}

// verificar se há uma nova carta presente
if (!mfrc522.PICC_IsNewCardPresent()) return;

// selecionar a carta
if (!mfrc522.PICC_ReadCardSerial()) return;

// imprimir o UID da carta no monitor serial
Serial.print("UID tag :");
String content = "";
byte letter;
for (byte i = 0; i < mfrc522.uid.size; i++) {
Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
Serial.print(mfrc522.uid.uidByte[i], HEX);
content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
content.concat(String(mfrc522.uid.uidByte[i], HEX));
}
Serial.println();
Serial.print("Mensagem : ");
content.toUpperCase();
if (content.substring(1) == "2A B2 D1 F1") {
lcd.clear();
lcd.print(" ACCESS ");
lcd.setCursor(0, 1);
lcd.print(" GRANTED ");
digitalWrite(RELAY, HIGH);
tone(BUZZER, 1000);
delay(toneDuration);
noTone(BUZZER);
digitalWrite(RELAY, LOW);
}
else {
lcd.clear();
lcd.print(" ACCESS ");
lcd.setCursor(0, 1);
lcd.print(" DENIED ");
digitalWrite(RELAY, HIGH);
tone(BUZZER, 1000);
// atrasar a execução do programa por 500 milissegundos
delay(500);
digitalWrite(RELAY, LOW);
noTone(BUZZER);
}

// verificar o nível de carga da bateria do dispositivo
float batteryVoltage = analogRead(A0) * (3.3 / 1023.0) * 2;

// verificar se o dispositivo está sendo carregado
if (batteryVoltage > 4.2) {
// acender o LED vermelho
digitalWrite(LED_VERMELHO, HIGH);
// apagar o LED verde
digitalWrite(LED_VERDE, LOW);
}
else if (batteryVoltage == 4.2) {
// acender o LED verde
digitalWrite(LED_VERDE, HIGH);
// apagar o LED vermelho
digitalWrite(LED_VERMELHO, LOW);
}
else {
// apagar os LEDs
digitalWrite(LED_VERMELHO, LOW);
digitalWrite(LED_VERDE, LOW);
}

// imprimir o nível de carga da bateria no monitor serial
Serial.print("Battery Voltage: ");
Serial.println(batteryVoltage);
}

}
